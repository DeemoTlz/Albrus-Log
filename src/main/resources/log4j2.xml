<?xml version="1.0" encoding="UTF-8"?>
<!-- status="OFF"，可以去掉，它的含义为是否记录log4j2本身的event信息，默认是OFF -->
<!-- status=debug 可以查看log4j2的装配过程 -->
<Configuration status="WARN">
    <!-- 定义下面的引用名 -->
    <Properties>
        <!--日志根目录-->
        <property name="LOG_HOME">log4j</property>
        <!--服务名-->
        <property name="SERVER_NAME">albrus</property>
        <!--日志备份归档目录-->
        <property name="BACKUP_HOME">backup</property>
        <!-- 日志切割的最小单位 -->
        <property name="EVERY_FILE_SIZE">5M</property>
        <!-- 日志输出级别 -->
        <property name="OUTPUT_LOG_LEVEL">INFO</property>
    </Properties>

    <!--先定义所有的appender-->
    <Appenders>
        <!--这个输出控制台的配置-->
        <Console name="Console" target="SYSTEM_OUT">
            <!-- 控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <!-- <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/> -->
            <!--输出日志的格式-->
            <!-- %c %logger 裁剪包 -->
            <!-- %M 方法名-->
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level [%c{36}#%M()] - %msg%n" />
        </Console>

        <!-- 程序员调试日志 -->
        <!--这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <!-- 按月生成归档日志，可以使用 filePattern="logs/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log.gz" -->
        <!-- 显示error级别之外的信息 -->
        <RollingRandomAccessFile name="RollingFile"
                                 fileName="${LOG_HOME}/dev_${SERVER_NAME}.log"
                                 filePattern="${LOG_HOME}/${BACKUP_HOME}/$${date:yyyy-MM}/dev_${SERVER_NAME}-%d{yyyy-MM-dd}-%i.log.gz">
            <PatternLayout>
                <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level [%c{-3}#%M()] - %msg%n</Pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <SizeBasedTriggeringPolicy size="${EVERY_FILE_SIZE}"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了5 -->
            <DefaultRolloverStrategy max="100">
                <!-- basePath表示日志存储的基目录，maxDepth=“1”表示当前目录。因为我们封存的历史日志在basePath里面的backup目录，所以maxDepth设置为3 -->
                <Delete basePath="${LOG_HOME}" maxDepth="3">
                    <IfFileName glob="**/dev_*.log.gz" />
                    <!-- age的单位：D、H、M、S，分别表示天、小时、分钟、秒  -->
                    <IfLastModified age="365D" />
                </Delete>
            </DefaultRolloverStrategy>

            <!--
                重要的是，如果有多个ThresholdFilter，那么Filters是必须的，同时在Filters中，首先要过滤不符合的日志级别，把不需要的首先DENY掉，然后再ACCEPT需要的日志级别，这个次序不能搞颠倒。
            -->
            <Filters>
                <!-- <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/> -->
                <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
        </RollingRandomAccessFile>
    </Appenders>

    <!-- 然后定义logger，只有定义了logger并引入的appender，appender才会生效 -->
    <Loggers>
        <AsyncLogger name="com.deemo.tlz.trace" level="TRACE"/>
        <AsyncLogger name="com.deemo.tlz.debug" level="DEBUG"/>
        <AsyncLogger name="com.deemo.tlz.info" level="INFO"/>
        <AsyncLogger name="com.deemo.tlz.warn" level="WARN"/>
        <AsyncLogger name="com.deemo.tlz.error" level="ERROR"/>
        <AsyncLogger name="com.deemo.tlz.fatal" level="FATAL"/>
        <!-- additivity 追加打印 -->
        <AsyncLogger name="com.deemo.tlz.other" level="DEBUG" additivity="true">
            <AppenderRef ref="Console"/>
        </AsyncLogger>

        <!-- 建立一个默认的root的logger，需要在root的level中指定输出的级别 -->
        <!-- 未额外配置的将使用默认的日志级别进行输出 -->
        <AsyncRoot level="ERROR" additivity="false" includeLocation="true">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="RollingFile"/>
        </AsyncRoot>
    </Loggers>
</Configuration>
